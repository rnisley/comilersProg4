/* vim: ft=yacc
 * That vim filetype setting is not need if I don't rename the file
 * Simple Infix notation calculator.  
 *
 * program5.ypp
 * COSC4785
 * Ric Nisley
 * 10/9/2021
 *
 * based on simple.ypp by kbuckner
 *
 */


 
%{

//#include <cmath> // for pow() in the original version of this
#include <iostream>
#include <FlexLexer.h>// yes have to include this here AND in the 'driver'
#include "nodes.hpp"
#include "typeTable.hpp"
#include "symbolTable.hpp"

//DO NOT USE "namespace std;"
using std::cerr;
using std::cout;
using std::endl;

/*
 * These are declared in "main" so that we can pass values between
 * the two portions of the program.
 */

extern Node *tree;
extern yyFlexLexer scanner;
extern int firstColumn;
TypeTable myTypeTable;
SymbolTable *global = new SymbolTable();
SymbolTable *current = global;
/* 
 * Need to do this define, an "acceptable" hack to interface
 * the C++ scanner with the C parser. 
 * I can still use things like scanner.YYtext() here if I want. Just that
 * (*bison*) does not know about cpp scanners, only the "C" version. 
 */

#define yylex() scanner.yylex()

// need the function prototype for the parser. defined it in the lpp file

void yyerror(const char *);


/*
 * There are lots of examples that have multiple types in the union here.
 * DO NOT DO THAT. Keep it simple, one type. This is the type that you use
 * in the definitions for %type tokens.
 */

%}

%union {
  Node *ttype;
}

/* 
 * Bison declarations.  All the 'names' here will be put into an enum
 * in the *.tab.hpp file. Include that in the .lpp file and then "return NUM;"
 * passes back the value. 
 *
 * To pass the parser a value, say for NUM, you must use 
 * yylval.ttype in the scanner. You could have a number of things in the union
 * but do not get cute. pointers, char, int, double. DO NOT use a class or 
 * struct declaration in the union. 
 *
 * The "exp" is only used here in this file but must be given a type if 
 *(in this case) it is ever assigned a value. See the rules.
 */
%type<ttype> exp program classDeclaration vardec bracketexps 
bracketexp name multibrackets newexp classBody consdec methdec parList block 
parameters exps parameter lVarDecs statement statements conStatement arglist
ident classHead consHead methHead
%token<ttype> NUM 
%token RPAREN LPAREN NULLT INT THIS ID DOT LBRACK RBRACK SEMI READ NEW CLASS 
%token LBRACE RBRACE VOID COMMA PRINT WHILE RETURN IF ELSE ASSIGN
%left EQ NE GE LE GT LT
%left PLUS MINUS OR   /* shift-reduce errors are solved by this */
%left TIMES DIV MOD AND    /* shift-reduce errors are solved by this */
%precedence NEG UPLUS NOT   /* negation--unary minus, not using right now*/


%% /* The grammar follows.  */
/* Do yourself a favor. Figure out a 'standard' formatting for this. Otherwise
 * it will just just be a big mess you cannot find anything in. 
 * FOLLOW THE STYLE GUIDE. You can use tabs as tabs but NOT indentation. */

program:  classDeclaration {
                          tree=$1;
                          $$=$1;
                        }
      | program classDeclaration {
                          $1->setnext($2);
                          $$=$1;
                        }
;  /*trust me, don't forget the semicolon*/

classDeclaration: classHead classBody {
                        $$ = new nodeClassDec(2, 1, $1, $2);
                        //current = classTable->getParent();
                        }
;

classHead: CLASS ident  {
                          //SymbolTable* classTable = new SymbolTable(current);
                          //current = classTable;
                          //myTypeTable.insert($2->getstring(), current);
                          $$ = new Node($2);
                        }
;

classBody: LBRACE RBRACE {
                        $$ = new nodeClassBody(3, 1);
                        }
          |LBRACE vardec consdec methdec RBRACE {
                        $$ = new nodeClassBody(3, 2, $2, new Node($3, $4));
                        }
          |LBRACE vardec consdec RBRACE {
                        $$ = new nodeClassBody(3, 3, $2, $3);
                        }
          |LBRACE consdec methdec RBRACE {
                        $$ = new nodeClassBody(3, 4, $2, $3);
                        }
          |LBRACE vardec methdec RBRACE {
                        $$ = new nodeClassBody(3, 5, $2, $3);
                        }
          |LBRACE vardec RBRACE {
                        $$ = new nodeClassBody(3, 6, $2);
                        }
          |LBRACE consdec RBRACE {
                        $$ = new nodeClassBody(3, 7, $2);
                        }
          |LBRACE methdec RBRACE {
                        $$ = new nodeClassBody(3, 8, $2);
                        }
;


vardec: INT ident SEMI {
                          //string myID = $2->getstring();
                          //Entry * var = new Entry(myID, "int");
                          //current->insert(myID, var);
                          $$ = new nodeVardec(4, 1, $2);
                        }
        | ident ident SEMI {
                          //string myType = $1->getstring();
                          //string myID = $2->getstring();
                          //Entry * var = new Entry(myID, \
                          //myType, myTypeTable.lookup(myType));
                          //current->insert($2->getstring(), var);
                          $$ = new nodeVardec(4, 1, $1, $2);
                        }
        | vardec INT ident SEMI {
                          //string myID = $3->getstring();
                          //Entry * var = new Entry(myID, "int");
                          //current->insert(myID, var);
                          $$ = new nodeVardec(4, 2, $1, $3);
                        }
        | vardec ident ident SEMI {
                          //string myType = $2->getstring();
                          //string myID = $3->getstring();
                          //Entry * var = new Entry(myID, \
                          //myType, myTypeTable.lookup(myType));
                          //current->insert($3->getstring(), var);
                          $$ = new nodeVardec(4, 2, $1, new Node ($2, $3));
                        }
        | INT bracketexps ident SEMI {
                          //string myID = $2->getstring();
                          //Entry * var = new Entry(myID, "int");
                          //current->insert(myID, var);
                          $$ = new nodeVardec(4, 1, $2, $3);
                        }
        | ident bracketexps ident SEMI {
                          //string myType = $1->getstring();
                          //string myID = $2->getstring();
                          //Entry * var = new Entry(myID, \
                          //myType, myTypeTable.lookup(myType));
                          //current->insert($2->getstring(), var);
                          $$ = new nodeVardec(4, 1, $1, new Node($2, $3));
                        }
        | vardec  INT bracketexps ident SEMI {
                          //string myID = $3->getstring();
                          //Entry * var = new Entry(myID, "int");
                          //current->insert(myID, var);
                          $$ = new nodeVardec(4, 2, $1, new Node($3, $4));
                        }
        | vardec  ident bracketexps ident SEMI {
                          //string myType = $2->getstring();
                          //string myID = $3->getstring();
                          //Entry * var = new Entry(myID, \
                          //myType, myTypeTable.lookup(myType));
                          //current->insert($3->getstring(), var);
                          $$ = new nodeVardec(4, 2, new Node($1, $2), new Node ($3, $4));
                        }
;

consdec: consHead parList RPAREN block {
                          $$ = new nodeConsdec(4, 1, $1, new Node($2, $4));
                          //current = classTable->getParent();
                        }
         |consdec consHead parList RPAREN block {
                         $$ = new nodeConsdec(4, 2, new Node($1, $2), new Node\
                          ($3, $5));
                          //current = classTable->getParent();
                        }
;

consHead : ident LPAREN {
                          //insert ID into symbol table. type is class ID
                          //SymbolTable* classTable = new SymbolTable(current);
                          //current = classTable;
                          $$ = new Node($1);
                        }

methdec: methHead parList RPAREN block {
                          $$ = new nodeMethdec(4, 1, $1, new Node($2, $4));
                          //current = classTable->getParent();
                        }
         |methdec methHead parList RPAREN block {
                          $$ = new nodeMethdec(4, 2, new Node($1, $2)\
                          , new Node($3, $5));
                          //current = classTable->getParent();
                        }
         |methHead error {
                          cout << scanner.lineno() << ":" << firstColumn;
                          cout << ":: "; //<<contents of line << endl;
                          cout << "Error. Expected ) or parameters." << endl;
                          yyerrok;
                        }
;

methHead : INT ident LPAREN {
                          //insert ID into symbol table. type is $2
                          //SymbolTable* classTable = new SymbolTable(current);
                          //current = classTable;
                              $$ = new Node($2);
                            }
          | VOID ident LPAREN {
                          //insert ID into symbol table. type is $2
                          //SymbolTable* classTable = new SymbolTable(current);
                          //current = classTable;
                              $$ = new Node($2);
                            }
          | ident ident LPAREN {
                          //insert ID into symbol table. type is $2
                          //SymbolTable* classTable = new SymbolTable(current);
                          //current = classTable;
                              $$ = new Node($1, $2);
                            }

parList : {$$ = nullptr;} %empty 
         | parameters   {
                          $$ = new nodeParlist(5, 2, $1);
                        }
;

parameters: parameter   {
                          $$ = new nodeParameters(6, 1, $1);
                        }
            | parameters COMMA parameter {
                          $$ = new nodeParameters(6, 2, $1, $3);
                        }
;

parameter: INT ident   {
                          //insert ID into symbol table. type is $1
                          $$ = new nodeParameter(7, 1, $2);
                        }
          | ident ident {
                          //insert ID into symbol table. type is $1
                          $$ = new nodeParameter(7, 1, $1, $2);
                        }
;

block : LBRACE lVarDecs statements RBRACE {
                          $$ = new nodeBlock(5, 1, $2, $3);
                        }
        |LBRACE lVarDecs RBRACE {
                          $$ = new nodeBlock(5, 2, $2);
                        }
        |LBRACE statements RBRACE {
                          $$ = new nodeBlock(5, 3, $2);
                        }
        |LBRACE RBRACE  {
                          $$ = new nodeBlock(5, 4);
                        }
        |LBRACE statements error {
                          cout << scanner.lineno() << ":" << firstColumn;
                          cout << ":: "; //<<contents of line << endl;
                          cout << "Error. Expected }" << endl;
                          yyerrok;
                        }
;

lVarDecs: INT ident SEMI {
                          //string myID = $2->getstring();
                          //Entry * var = new Entry(myID, "int");
                          //current->insert(myID, var);
                          $$ = new nodeVardec(4, 1, $2);
                        }
        | ident ident SEMI {
                          //string myType = $1->getstring();
                          //string myID = $2->getstring();
                          //Entry * var = new Entry(myID, \
                          //myType, myTypeTable.lookup(myType));
                          //current->insert($2->getstring(), var);
                          $$ = new nodeVardec(4, 1, $1, $2);
                        }
        | lVarDecs INT ident SEMI {
                          //string myID = $3->getstring();
                          //Entry * var = new Entry(myID, "int");
                          //current->insert(myID, var);
                          $$ = new nodeVardec(4, 2, $1, $3);
                        }
        | lVarDecs ident ident SEMI {
                          //string myType = $2->getstring();
                          //string myID = $3->getstring();
                          //Entry * var = new Entry(myID, \
                          //myType, myTypeTable.lookup(myType));
                          //current->insert($3->getstring(), var);
                          $$ = new nodeVardec(4, 2, $1, new Node ($2, $3));
                        }
        | INT bracketexps ident SEMI {
                          //string myID = $2->getstring();
                          //Entry * var = new Entry(myID, "int");
                          //current->insert(myID, var);
                          $$ = new nodeVardec(4, 1, $2, $3);
                        }
        | ident bracketexps ident SEMI {
                          //string myType = $1->getstring();
                          //string myID = $2->getstring();
                          //Entry * var = new Entry(myID, \
                          //myType, myTypeTable.lookup(myType));
                          //current->insert($2->getstring(), var);
                          $$ = new nodeVardec(4, 1, $1, new Node($2, $3));
                        }
        | lVarDecs INT bracketexps ident SEMI {
                          //string myID = $3->getstring();
                          //Entry * var = new Entry(myID, "int");
                          //current->insert(myID, var);
                          $$ = new nodeVardec(4, 2, $1, new Node($3, $4));
                        }
        | lVarDecs ident bracketexps ident SEMI {
                          //string myType = $2->getstring();
                          //string myID = $3->getstring();
                          //Entry * var = new Entry(myID, \
                          //myType, myTypeTable.lookup(myType));
                          //current->insert($3->getstring(), var);
                          $$ = new nodeVardec(4, 2, new Node($1, $2), new Node ($3, $4));
                        }
        | ident ident error {
                          cout << scanner.lineno() << ":" << firstColumn;
                          cout << ":: "; //<<contents of line << endl;
                          cout << "Error. Suspect missing semicolon." << endl;
                          yyerrok;
                        }
        | INT ident error {
                          cout << scanner.lineno() << ":" << firstColumn;
                          cout << ":: "; //<<contents of line << endl;
                          cout << "Error. Suspect missing semicolon." << endl;
                          yyerrok;
                        }
;

statements: statement   {
                          $$ = new nodeStatements(6, 1, $1);
                        }       
            |statements statement {
                          $$ = new nodeStatements(6, 2, $1, $2);
                        }
;

statement: SEMI         {
                          $$ = new nodeStatement(7, 1);
                        }
            | name ASSIGN exp SEMI {
                          $$ = new nodeStatement(7, 2, $1,$3);
                        }
            | name LPAREN arglist RPAREN SEMI {
                          $$ = new nodeStatement(7, 4, $1, $3);
                        }
            | PRINT LPAREN arglist RPAREN SEMI {
                          $$ = new nodeStatement(7, 6, $3);
                        }
            | conStatement {
                          $$ = new nodeStatement(7, 7, $1);
                        }
            | WHILE LPAREN exp RPAREN statement {
                          $$ = new nodeStatement(7, 8, $3, $5);
                        }
            | RETURN SEMI {
                          $$ = new nodeStatement(7, 9);
                        }
            | RETURN exp SEMI {
                          $$ = new nodeStatement(7, 10, $2);
                        }
            | block     {
                          $$ = new nodeStatement(7, 11, $1);
                        }
;

name:   THIS            {
                          $$ = new nodeName(8, 1);
                        }
        |ident             {
                          $$ = new nodeName(8, 2, $1);
                        }
        |name DOT ident {
                          $$ = new nodeName(8, 3, $1, $3);
                        }
        |name bracketexp {
                          $$ = new nodeName(8, 5, $1, $2);
                        }
      | name error ident {
                          cout << scanner.lineno() << ":" << firstColumn;
                          cout << ":: "; //<<contents of line << endl;
                          cout << "Error. Perhaps you meant period?" << endl;
                          yyerrok;
                        }
;

arglist:%empty          
        | exps          {
                          $$ = new nodeArglist(8, 2, $1);
                        }
;

conStatement: IF LPAREN exp RPAREN statement {
                          $$ = new nodeConStatement(8, 1, $3, $5);
                        }
              | IF LPAREN exp RPAREN statement ELSE statement{
                          $$ = new nodeConStatement(8, 2, $3, \
                          new Node($5, $7));
                        }
;


exps: exp               {
                          $$ = new nodeExps(9, 1, $1);
                        }
      | exp COMMA exps  {
                          $$ = new nodeExps(9, 2, $1,$3);
                        } 
;

exp:   name             {
                          $$ = new nodeExp(10, 1, $1);
                        } 
       |NUM             {       
                          $$=new nodeExp(10, 2);
                          $$->setval($1->getint());
                        }
       | NULLT          { 
                          $$=new nodeExp(10, 3);
                        }
       |name LPAREN arglist RPAREN {
                          $$ = new nodeExp(10, 4, $1, $3);
                        }
       |READ LPAREN RPAREN {
                          $$ = new nodeExp(10, 5);
                        }
       |newexp          {
                          $$ = new nodeExp(10, 6, $1);
                        }
       | exp PLUS exp   { 
                          $$=new nodeExp(10, 7, $1,$3);
                        }
       | exp MINUS exp  { 
                          $$=new nodeExp(10, 8, $1,$3);
                        }
       | exp OR exp     { 
                          $$=new nodeExp(10, 9, $1,$3);
                        }
       | exp TIMES exp  { 
                          $$=new nodeExp(10, 10, $1,$3);
                        }
       | exp DIV exp    {
                          $$=new nodeExp(10, 11, $1,$3);
                        }
       | exp MOD exp    {
                          $$=new nodeExp(10, 12, $1,$3);
                        }
       | exp AND exp    {
                          $$=new nodeExp(10, 13, $1,$3);
                        }
       | exp EQ exp     {
                          $$=new nodeExp(10, 14, $1,$3);
                        }
       | exp NE exp     {
                          $$=new nodeExp(10, 15, $1,$3);
                        }
       | exp GE exp     {
                          $$=new nodeExp(10, 16, $1,$3);
                        }
       | exp LE exp     { 
                          $$=new nodeExp(10, 17, $1,$3);
                        }
       | exp GT exp     {
                          $$=new nodeExp(10, 18, $1,$3);
                        }
       | exp LT exp     { 
                          $$=new nodeExp(10, 19, $1,$3);
                        }
       | MINUS exp  %prec NEG { 
                          $$=new nodeExp(10, 20, $2);
                        }
       | PLUS exp  %prec UPLUS { 
                          $$=new nodeExp(10, 21, $2);
                        }
       | LPAREN exp RPAREN    { 
                          $$=new nodeExp(10, 22, $2);
                        }
       | NOT exp        { 
                          $$=new nodeExp(10, 23, $2);
                        }
;

newexp: NEW ident LPAREN arglist RPAREN {
                          $$ = new nodeNewexp(11, 1, $4); 
                        }
        |NEW INT        {
                          $$ = new Node(); 
                        }
        |NEW INT bracketexps {
                          $$ = new nodeNewexp(11, 3, $3); 
                        }
        |NEW INT multibrackets {
                          $$ = new nodeNewexp(11, 4, $3); 
                        }
        |NEW INT bracketexps multibrackets {
                          $$ = new nodeNewexp(11, 5, $3,$4); 
                        }
        |NEW ident        {
                          $$ = new nodeNewexp(11, 2, $2); 
                        }
        |NEW ident bracketexps {
                          $$ = new nodeNewexp(11, 3, $2,$3); 
                        }
        |NEW ident multibrackets {
                          $$ = new nodeNewexp(11, 4, $3); 
                        }
        |NEW ident bracketexps multibrackets {
                          $$ = new nodeNewexp(11, 5, $2, new Node($3,$4)); 
                        }
;

bracketexps:  bracketexp {
                          $$ = new nodeBracketExps(12, 1, $1);
                        }
              |bracketexp bracketexps {
                          $$ = new nodeBracketExps(12, 2, $1,$2);
                        }
              | multibrackets {
                          $$ = new Node($1);
                        }
;

bracketexp: LBRACK exp RBRACK {
                          $$ = new nodeBracketExp(13, 1, $2);
                        }
;

multibrackets: LBRACK RBRACK {
                          $$ = new nodeMultibrackets(12, 1);
                        }
               |multibrackets LBRACK RBRACK {
                          $$ = new nodeMultibrackets(12, 2, $1);
                        }
;

ident: ID               {
                          $$ = new Node();
                          $$ -> setval(scanner.YYText());
                        }
;
%%
